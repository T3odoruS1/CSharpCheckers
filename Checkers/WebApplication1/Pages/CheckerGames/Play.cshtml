@page
@using GameBrain
@model WebApplication1.Pages.CheckerGames.Play

@{
    ViewData["Title"] = "Play";
}
<h3 class="checker-counter"> White: @Model.Brain.CountCheckers(false)</h3>
<h3 class="checker-counter"> Black: @Model.Brain.CountCheckers(true)</h3>
<br/>

<h2>
    @if (Model.WonByBlack == null)
    {
        <h1>
            Playing as: @GetCurrentPlayerName()
        </h1>
        <h2>
            Your status: @GetPlayerMoveStatus()
        </h2>
        if (!Model.Brain.IsGameOver())
        {
            <h2>
                Next move: @(!Model.Brain.NextMoveByBlack() ? $"Player One - {Model.Game.Player1Name} - White" :
                               $"Player Two - {Model.Game.Player2Name} - Black")
            </h2>
        }
    }
    else
    {
        <h2>
            Game won by: @(Model.WonByBlack == true ? Model.Game.Player2Name + " Black " :
                             Model.Game.Player1Name + " White ")
        </h2>
    }

</h2>
<br/>
<table class="table table-bordered game-table">
    @for (var y = 0; y < Model.Board.GetLength(1); y++)
    {
        <tr>
            @for (var x = 0; x < Model.Board.GetLength(0); x++)
            {
                <td class="game-table-cell @GetCellBgrClass(Model.Board[x, y], x, y)">

                    @if (!Model.FirstReq && 
                         Model.Board[x, y] != EGameSquareState.Unplayable &&
                         Model.Board[x, y] != EGameSquareState.Empty && 
                         Model.Brain.HasMoves(x, y) && 
                         CheckerIsClickable(x,y))
                    {
                        if (Model.IsPlayerMove())
                        {
                            <div class="clickable-div highlighted-div" onclick="window.
                            location = '/CheckerGames/Play?id=@Model.Game.Id&firstReq=1&x=@x&y=@y&playerNo=@Model.PlayerNo'">
                                @GetCellContents(Model.Board[x, y])
                            </div>
                        }
                        else
                        {
                            <div class="clickable-div">
                                @GetCellContents(Model.Board[x, y])
                            </div>
                        }
                    }
                    else if (Model.FirstReq && 
                             Model.InitX != null && 
                             Model.InitY != null && 
                             Model.IsPlayerMove())
                    {
                        if (Model.Brain.MoveIsPossible((int)Model.InitX, (int)Model.InitY, x, y) ||
                            (x == Model.InitX &&
                             y == Model.InitY &&
                             Model.GameState.CheckerThatPreformedTakingX == null))
                        {
                            if (Model.InitX != x && Model.InitY != y)
                            {
                                <div class="clickable-div highlighted-div active-checker-div" onclick="window.
                            location = '/CheckerGames/Play?id=@Model.Game.Id&x=@x&y=@y&initX=@Model.InitX&initY=@Model.InitY&playerNo=@Model.PlayerNo'">

                                    @GetCellContents(Model.Board[x, y])
                                </div>
                            }
                            else
                            {
                                <div class="clickable-div @(x == Model.InitX &&
                                                            y == Model.InitY &&
                                                            Model.GameState.CheckerThatPreformedTakingX == null? "active-checker-div" : "")">
                                    @GetCellContents(Model.Board[x, y])
                                </div>
                            }
                            
                        }
                        else
                        {
                            <div class="clickable-div @(x == Model.InitX &&
                                                        y == Model.InitY ? "active-checker-div" : "")">
                                @GetCellContents(Model.Board[x, y])
                            </div>
                        }
                    }
                    else
                    {
                        <div
                            class="clickable-div">
                            @GetCellContents(Model.Board[x, y])
                        </div>
                    }

                </td>
            }
        </tr>
    }
</table>

@if (!Model.Game.GameOptions!.TakingIsMandatory && Model.GameState.CheckerThatPreformedTakingY != null && Model.IsPlayerMove())
{
    <button onclick="window.location = '/CheckerGames/Play?id=@Model.Game.Id&playerNo=@Model.PlayerNo&pass=1'">
        Pass the taking move
    </button>
}



@section Scripts 
{
    @if (!Model.IsPlayerMove() && !Model.Brain.IsGameOver())
    {
        <script>
            setTimeout(()=>{
                window.location = '/CheckerGames/Play?id=@Model.Game.Id&playerNo=@Model.PlayerNo';
            },1000)



        </script>
    }

}

@functions
{
    string GetCellBgrClass(EGameSquareState piece, int x, int y)
    {
    // If initial x and initial y is set then run a check if this square is available for the move.
        if (Model.InitX != null && Model.InitY != null)
        {
            if (Model.Brain.MoveIsPossible((int)Model.InitX, (int)Model.InitY, x, y))
            {
                return "game-table-cell-move-is-possible";
            }
        }
        return piece == EGameSquareState.Unplayable ? "game-table-cell-white" : "game-table-cell-black";
    }

    string GetCellContents(EGameSquareState piece)
    {
        switch (piece)
        {
            case EGameSquareState.Unplayable:
                return "";
            case EGameSquareState.Empty:
                return "";
            case EGameSquareState.Black:
                return "◎";
            case EGameSquareState.White:
                return "◉";
            case EGameSquareState.WhiteKing:
                return "=◉=";
            case EGameSquareState.BlackKing:
                return "=◎=";
        }
        return "";
    }

    bool CheckerIsClickable(int x, int y)
    {
        if (Model.IsPlayerMove())
        {
            if (Model.PlayerNo == 0 &&
                (Model.Board[x, y] == EGameSquareState.White ||
                 Model.Board[x, y] == EGameSquareState.WhiteKing))
            {
                return true;
            }
            if (Model.PlayerNo == 1 &&
                (Model.Board[x, y] == EGameSquareState.BlackKing ||
                 Model.Board[x, y] == EGameSquareState.Black))
            {
                return true;
            }
        }
        return false;
    }

    string GetCurrentPlayerName()
    {
        if (Model.PlayerNo == 0)
        {
            return Model.Game.Player1Name + " - White";
        }
        
        return Model.Game.Player2Name + " - Black";
    }

    string GetPlayerMoveStatus()
    {
        if (Model.Brain.IsGameOver())
        {
            return $"Game over! Winner is {GetWinner()}";
        }
        if (Model.GameState.NextMoveByBlack && Model.PlayerNo == 1)
        {
            return "Your turn!";
        }
        if (!Model.GameState.NextMoveByBlack && Model.PlayerNo == 0)
        {
            return "Your turn!";
        }
        return "Please wait for opponents move";
    }

    string GetWinner()
    {
        if (Model.Brain.GameWonByBlack())
        {
            return "Black! - " + Model.Game.Player2Name;
        } if (!Model.Brain.GameWonByBlack())
        {
            return "White! - " + Model.Game.Player1Name;

        }
        return "";
    }


    

}